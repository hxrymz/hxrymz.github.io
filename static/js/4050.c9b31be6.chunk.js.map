{"version":3,"file":"static/js/4050.c9b31be6.chunk.js","mappings":"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","sources":["features/CuentasContables/services/server_fetching.js"],"sourcesContent":["import { fetchEncryptStream, updStore, getStore, gen16CodeId, convertArray2Obj, ObjectKeys, callbackOnMemory, convertObj2Array, qryStore, parseFloatToDecimal, parseDateMMDDYY, parseDateYYYYMMDD, csvJSON, isNotEmpty, fetchQueue } from \"../../../stores/Utils\";\nimport { OpenToast } from \"../../../components/Toast\";\n\n\n\n\n\n\nexport const calc_sub_myr = async (cb) => {\n    let accounts_summary_by_months = getStore(\"accounts_summary_by_months\");\n    if(accounts_summary_by_months?.balanceId){\n        let bdyq2 = {...getStore(qryStore())?.calc_sub_myr};\n        bdyq2.params = {\n            businessId:  getStore(\"profileUser\")?.businessId,\n            balanceId:  accounts_summary_by_months?.balanceId\n        }\n        const res = fetchEncryptStream(bdyq2);\n        const td = await res;\n        if (td) {\n            accounts_summary_by_months.summary = td;\n            updStore(\"accounts_summary_by_months\", accounts_summary_by_months);\n            OpenToast({ text: \"Accounts Summary Updated\", timeout: 3500 });\n\t        cb && cb();\n        }\n    }\n    else{\n        let frm2Sv = {};\n        frm2Sv.balanceId = gen16CodeId();\n        frm2Sv.type = \"accounts_summary_by_months\";\n        let bdyq2 = {...getStore(qryStore())?.add_balances};\n        bdyq2.params = {\n            businessId:  getStore(\"profileUser\")?.businessId\n        };\n        bdyq2.form=frm2Sv;\n        const res = fetchEncryptStream(bdyq2);\n        const td = await res;\n        if (td) {\n            updStore(\"accounts_summary_by_months\", frm2Sv);\n            OpenToast({ text: \"Something went Wrong. try again later\", timeout: 3500 });\n\t\n            cb && cb();\n        }\n    }   \n};\n\n\nexport const getall_account = async (cb) => {\n\n    let bdyq2 = {...getStore(qryStore())?.all_accounts};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId\n    }\n\n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    if (td) {\n        updStore(\"account_list\", sortAccounts(td,\"code\"));\n        updStore(\"account_ids\", convertArray2Obj(td,\"accountId\"));\n        cb && cb();\n    }\n};\n\n\nexport const getall_subaccount = async (cb) => {\n    let bdyq2 = {...getStore(qryStore())?.all_sub_account};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId\n    }\n\n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    if (td) {\n        updStore(\"sub_account_list\", sortSubAccounts(td,\"subAccount\"));\n        updStore(\"sub_account_group\", convertArray2ObjGroupby(td,\"accountId\"));\n        updStore(\"sub_account_ids\", convertArray2Obj(td,\"sub_accountId\"));\n        getall_account();\n        cb && cb();\n    }\n};\n\n\n\nexport const getall_bankRcrd = async (cb) => {\n    let bdyq2 = {...getStore(qryStore())?.all_bank_bUp};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId\n    }\n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    //fetchOnQueue(td);\n    //console.log(JSON.stringify(td));\n    if (td) {\n        updStore(\"ourBank\", sortSubAccounts(td,\"date\"));\n        updStore(\"ourBank_ids\", convertArray2Obj(td,\"bankRecordId\"));\n        let filtersPendidng = filtersPnd(td, getStore(\"submayor_list\"));\n        updStore(\"ourBank_filtered\", filtersPendidng);\n        cb && cb();\n    }\n};\n\n\nconst filtersPnd =  (arr, sub2) => {\n    let pending = [];\n    let sub = {...sub2};\n    let verified = [];\n    let rangDt = getStore(\"date_range_submayor\");\n    for(let i in arr){\n        let hh =  arr[i];\n        if(hh.date>=rangDt?.initDate && hh.date<=rangDt?.lastDate){\n            if(hh.linkId && hh.status===9){\n                verified.push(hh);\n                delete sub[hh.linkId];\n            }\n            else{\n                pending.push(hh);\n            }\n        }\n    }\n    return {\n        pending:sortSubAccounts(pending,\"date\"),\n        verified:sortSubAccounts(verified,\"date\"),\n        sub_mayor: sortByDate(convertObj2Array(sub),\"date\")\n    };\n}\n\n\n\nfunction convertArray2ObjGroupby(arr1, key) {\n    key = key ? key : \"id\";\n    var obj = {};\n    if (arr1.length > 0) {\n            arr1.map((s) => {\n                if(s.subAccount){\n                    if (!obj[s[key]]) {\n                    obj[s[key]] = [];\n                    }\n                    obj[s[key]].push(s);\n                }\n            });\n    } else {\n      obj = null;\n    }\n    return obj;\n  }\n\n\n\n\nexport const search_account = async (cb) => {\n    \n    let bdyq2 = {...getStore(qryStore())?.search_account};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId,\n        \":search\": getStore(\"searchQry\")\n    }\n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    if (td) {\n        updStore(\"account_list\", sortAccounts(convertObj2Array(td),\"code\"));\n        cb && cb();\n    }\n};\n  \n \n\n\nexport const get_filter_by_acc = async (frm,cb) => {\n    \n    let bdyq2 = {...getStore(qryStore())?.filter_search_opera};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId,\n        \":account\": frm?.account,\n        \":subAccount\": frm?.subAccount,\n        \":date1\": getStore(\"date_range_submayor\")?.initDate,\n        \":date2\": getStore(\"date_range_submayor\")?.lastDate\n    }\n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    if (td && !td.error) {\n        updStore(\"submayor_list\", td);\n        updStore(\"submayor_group\", GroupbyAcc(td));\n        //updStore(\"submayor_ids\", convertArray2ObjGroupby(td,\"operationId\"));\n        \n    }\n    cb && cb();\n};\n\n\n\n\nexport function GroupbyAcc(arr, isPay) {\n    \n    var obj = {\n        \"operations\":[]\n    };\n    let arr1 = arr && ObjectKeys(arr)\n    if (arr1.length > 0) {\n      arr1.map((ele) => {\n        let s = arr[ele];\n       \n        if(s[\"type\"]){\n            obj[\"operations\"].push(convert4acc(s));\n        }\n      });\n    } else {\n      obj = null;\n    }\n    return obj;\n  }\n\n\n\n  export function convert4acc(s) {\n    let nItm = {};\n    nItm[\"account\"] =  getStore(\"account_ids\")?.[s[\"account\"]];\n    nItm[\"sub_account\"] = getStore(\"sub_account_ids\")?.[s[\"subAccount\"]];\n    nItm[\"comprobanteId\"] = s[\"comprobanteId\"];\n    nItm[\"operationId\"] = s[\"operationId\"];\n    nItm[\"document\"] = s[\"document\"];\n    nItm[\"date\"] = s[\"date\"];\n    if(s[\"type\"]===\"credit\"){\n        nItm[\"debit\"] = 0;\n        nItm[\"credit\"] = s[\"amount\"];\n        \n    }\n    else if(s[\"type\"]===\"debit\"){\n        nItm[\"credit\"] = 0;\n        nItm[\"debit\"] = s[\"amount\"];\n    }\n    return nItm;\n  }\n\n\n\n  \n//  sorting episodes comparing inputs to save in cache\nexport const sortAccounts = (td, key) =>\ncallbackOnMemory(\n\t\"sortAccounts\",\n\t[td, key],\n\t() => {\n        let order = true;\n\t\tlet sortedA = td && td.sort((a, b) => {\n\t\t\tlet A = a[key] * 1;\n\t\t\tlet B = b[key] *1;\n\t\t\tif (A < B) {\n\t\t\t\treturn order ? -1 : 1;\n\t\t\t}\n\t\t\tif (A > B) {\n\t\t\t\treturn order ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n        });\n\t\treturn sortedA;\n\t}\n);\n\n\nexport const sortSubAccounts = (td, key) =>\ncallbackOnMemory(\n\t\"sortSubAccounts\",\n\t[td],\n\t() => {\n        let order = true;\n\t\tlet sortedA = td && td.sort((a, b) => {\n\t\t\tlet A = a[key] * 1;\n\t\t\tlet B = b[key] *1;\n\t\t\tif (A < B) {\n\t\t\t\treturn order ? -1 : 1;\n\t\t\t}\n\t\t\tif (A > B) {\n\t\t\t\treturn order ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n        });\n\t\treturn sortedA;\n\t}\n);\n\n\n\n\nexport const sortComprobantesByDate = (td) =>\ncallbackOnMemory(\n\t\"sortComprobantesByDate\",\n\t[td],\n\t() => {\n        let order = true;\n        let key = \"date\";\n\t\tlet sortedA = td.sort((a, b) => {\n\t\t\tlet A =a[key];\n\t\t\tlet B = b[key];\n\t\t\tif (A < B) {\n\t\t\t\treturn order ? -1 : 1;\n\t\t\t}\n\t\t\tif (A > B) {\n\t\t\t\treturn order ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n        });\n\t\treturn sortedA;\n\t}\n);\n\n\n\n\n\n\n\n\n\n\n\nexport const calcSubmayor = (td, account, subAccount, mInit) =>\ncallbackOnMemory(\n\t\"calcSubmayor\",\n    [td, account, subAccount, mInit],() => {\n        let order = true;\n        let key = \"date\";\n\n        let monthInit = (new Date(getStore(\"date_range_submayor\")?.initDate)).getMonth();\n\n\n        const prevBalAmount = getPrevBalance(monthInit,{account,subAccount}, \"calcSubmayor\");\n\n        \n        let prevBal = prevBalAmount || 0;\n\n\t\tlet sortedA = td && td.sort((a, b) => {\n\t\t\tlet A =a[key]\n\t\t\tlet B = b[key]\n\t\t\tif (A < B) {\n\t\t\t\treturn order ? -1 : 1;\n\t\t\t}\n\t\t\tif (A > B) {\n\t\t\t\treturn order ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n        });\n\n\n        const saldo = (item)=>{\n            let itm = {...item};\n            if(item?.account?.type===\"credit\"){\n                itm[\"saldo\"] = prevBal +  (itm[\"credit\"]*1) - (itm[\"debit\"]*1); \n            }else{\n                itm[\"saldo\"] = prevBal + (itm[\"debit\"]*1) - (itm[\"credit\"]*1); \n            }\n            prevBal = itm[\"saldo\"];\n            return itm;\n        }\n\n\t\treturn sortedA.map((d)=>saldo(d));\n\t}\n);\n\n\n\n\n\n\n\nexport function prepareDatatoCvs() {\n    const reduc = (itm)=>{\n        let acc = getStore(\"account_ids\")?.[itm.accountId];\n        let newObj = {cuenta: acc.code+\"\", nombre: acc.name , sub_cuenta: itm.subAccount+\"\", nombre_sub_cuenta: itm.subAccountName };\n        return newObj;\n    }\n    return  sortAccounts(getStore(\"sub_account_list\").map(reduc),\"cuenta\");\n}\n\n\n\n\nexport const get_balance_params = async (cb) => {\n\n    let bdyq2 = {...getStore(qryStore())?.get_balance_general_param};\n\n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    if (td && !td.error) {\n        updStore(\"balance_general_param\",  td?.general);\n        updStore(\"result_sheet_params\", td?.result);\n        updStore(\"balance_general_upd_flds\", td?.general_flds);\n        updStore(\"result_sheet_upd_flds\", td?.result_flds);\n    }\n    cb && cb();\n};\n\n\n\n\n\nexport const get_balances_by_type = async (type,coll,cb) => {\n\n    let bdyq2 = {...getStore(qryStore())?.find_balances};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId,\n        \":type\": type\n    }\n   \n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    \n    if (td && !td.error) {\n        let kId = ObjectKeys(td)[0];\n        let general_sheet = td[kId];\n        updStore(coll, general_sheet);\n        updStore(coll + \"_bck\", {...general_sheet});\n    }\n    cb && cb();\n   \n};\n\n\n\n\n\nexport const calc_balance = async (balanceId,resultId,cb) => {\n\n    let bdyq2 = {...getStore(qryStore())?.calc_balance_general};\n    bdyq2.params = {\n        businessId:  getStore(\"profileUser\")?.businessId,\n        \"balanceId\": balanceId,\n        resultId:resultId\n    }\n    \n\n    \n    const res = fetchEncryptStream(bdyq2);\n    const td = await res;\n    if (td && !td.error) {\n        cb && cb(td);\n    }else{\n        cb && cb();\n    }\n    \n   \n};\n\n\n\n\n\nexport const prepareBalanceComprobacion = async () => {\n        \n        let bdyq2 = {...getStore(qryStore())?.calc_balance_comprobacion};\n        bdyq2.params = {\n            businessId:  getStore(\"profileUser\")?.businessId\n        }\n        \n        const res = fetchEncryptStream(bdyq2);\n        const td = await res;\n        if (td && !td.error) {\n            const reduc = (itm)=>{\n                let acc = getStore(\"account_ids\")?.[itm.accountId];\n                \n                let saldo = itm.subAccount ?  td[itm.accountId ]?.[\"sub\"][itm.sub_accountId]?.[\"saldo\"]  :  td[itm.accountId ]?.[\"saldo\"] ;\n                let newObj = {cuenta: acc.code+\"\", nombre: acc.name , sub_cuenta: itm.subAccount?itm.subAccount:\"\", nombre_sub_cuenta: itm.subAccount?itm.subAccountName:\"\" , saldo: saldo|| 0 , type: acc.type };\n                return newObj;\n            }\n            return  sortAccounts(getStore(\"sub_account_list\").map(reduc),\"cuenta\");\n           \n        }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n/**********************************************************************/\n\n\n\n\n\n\n\n\nexport function prepareSubMayorDatatoCvs(arr, acc, subacc) {\n    const reduc = (itm)=>{\n        return {\n            date: parseDateMMDDYY(itm.date), \n            document:   itm.document,\n            comprobante:   itm.comprobanteId,\n            description: itm.description,\n            debito: itm.debit, \n            credito: itm.credit,\n            saldo: itm.saldo,\n            cuenta: acc,\n            sub_cuenta: subacc?subacc:\"\",\n            operationId: itm.operationId,\n        };\n    }\n    return  arr.map(reduc);\n}\n\n\n\nconst cnv2Obj =  (arr) => {\n    let obj = {}\n    for(let i in arr){\n        obj[i] = arr[i];\n    }\n    return obj;\n}\n\n\nconst cnv2ObjBnk =  (arr, sub2) => {\n    let obj = {};\n    let sub = {...sub2};\n    for(let i in arr){\n        let hh =  arr[i];\n        if(hh.linkId && hh.status===9){\n            delete sub[hh.linkId];\n        }\n        else{\n            if(hh.date){\n                obj[i] = hh;\n            }\n        }\n    }\n    return {obj,sub};\n}\n\n\n\n\nexport const compareEstadoCuenta =  (banco,vsc) => {\n\n\n    let ourBank_filtered = getStore(\"ourBank_filtered\");\n    \n    let submS = ourBank_filtered.sub_mayor;\n    let submSIndx = cnv2Obj(submS);\n\n    \n    let ECS = cnv2Obj(ourBank_filtered.pending);;\n    \n    // let ECS3 = banco;\n    let cmpAlready = {};\n    let cmpbNotInBank = {};\n    let check = {};\n    let checkSub = {}\n    // let noMath = {}\n\n    let subm = submS;\n    let EC = ECS;\n\n    if(vsc){\n        subm = ECS;\n        EC = submS;\n    }\n\n    \n\n    const validateIsInBank = (itm) =>{\n        if(!cmpAlready[itm.comprobantId]){\n            cmpAlready[itm.comprobantId] = itm;\n        }\n        if(cmpbNotInBank[itm.comprobantId]){\n            delete cmpbNotInBank[itm.comprobantId];\n            return 1;\n        }\n    }\n\n    const validateIsNotInBank = (itm) =>{\n        if(!cmpbNotInBank[itm.comprobantId]){\n            cmpbNotInBank[itm.comprobantId] = itm;\n            return 1;\n        }\n    }\n    \n\n    const vv = (itmB, indB) =>{\n        \n        for(let i in submSIndx){\n            let itm= submSIndx[i];\n            let amo = itmB.amount*1;\n            let amm = itm.amount * (amo<0?-1:1);\n\n            if(check[\"\"+indB]){\n                break;\n            }\n\n            //console.log(indB);\n            let document = itm.document?.trim();\n            let document2 = itmB.checkOrSlip?.trim();\n\n\n            //console.log(document , document2 , amm , amo);\n            \n            if(document2 && document === document2 && amm === amo ){\n                check[\"\"+indB] = \"\"+i;\n                checkSub[\"\"+i] = \"\"+indB;\n                validateIsInBank(itm)\n                delete submSIndx[i];\n                //delete noMath[\"\"+indB];\n                break;\n                \n            }\n            else if(amm ===  amo){\n                    check[\"\"+indB] = \"\"+i;\n                    checkSub[\"\"+i] = \"\"+indB;\n                    validateIsInBank(itm);\n                    delete submSIndx[i];\n                    //delete noMath[\"\"+indB]\n                    break;\n            }\n            else{\n                //noMath[\"\"+indB] = \"NtF\";\n                validateIsNotInBank(itm);\n            }\n        }\n    }\n\n    \n    for(let i in EC){\n        let itm = EC[i];\n        if(itm.checkOrSlip){\n            vv(itm, i);\n        }\n    }\n    for(let i in EC){\n        let itm = EC[i];\n        vv(itm, i);\n    }\n    let ready = []\n\n    \n    //console.log(\"***************\");\n    \n    /*\n \n    ObjectKeys(cmpbNotInBank).map((itm, ind)=>{\n        console.log(\"nocmpbNotInBankMath\",itm, cmpbNotInBank[itm]);\n        //console.log(\"noMath\",itm, check[itm]);\n    })\n    */\n\n   \n    for(let i in EC){\n        let iit = EC[i];\n        if(check[i]){\n            iit[\"comprobanteId\"] = subm[check[i]][\"comprobanteId\"];\n            iit[\"document\"] = subm[check[i]][\"document\"];\n            iit[\"operationId\"] = subm[check[i]][\"operationId\"];\n            ready.push(iit);\n        }\n        else{\n            iit[\"comprobanteId\"] = \"\";\n            iit[\"document\"] = \"\";\n            iit[\"operationId\"] = \"\";\n            ready.push(iit)\n        }\n    };\n\n    return {ready,cmpbNotInBank} ;\n}\n\n\n\n\n\n\n\n\n\n\n\nconst sortByDate = (td, key) => {\n    let order = true;\n    let sortedA = td && td.sort((a, b) => {\n        let A = parseDateYYYYMMDD(a[key]);\n        let B = parseDateYYYYMMDD(b[key]);\n        if (A < B) {\n            return order ? -1 : 1;\n        }\n        if (A > B) {\n            return order ? 1 : -1;\n        }\n        return 0;\n    });\n    return sortedA;\n}\n\n\n\n\n\n\nconst parseBRecord = (it) => {\n    let iit = {...it};\n    if(iit.hasOwnProperty(\"Date\")){\n        iit[\"date\"] =(new Date(iit[\"Date\"])).getTime()+65000;\n        iit[\"dateDDMMYYYY\"] =iit[\"Date\"];\n        delete iit[\"Date\"];\n    }\n\n   \n\n    if(iit.hasOwnProperty(\"Posting Date\")){\n        iit[\"date\"] =iit[\"Posting Date\"];\n        delete iit[\"Posting Date\"];\n    }\n   \n    if(iit.hasOwnProperty(\"Check Number\") || iit.hasOwnProperty('\"Check Number\"')){\n        iit[\"checkOrSlip\"] =iit[\"Check Number\"]?.trim();\n        delete iit[\"Check Number\"];\n    }\n\n    if(iit.hasOwnProperty('\"Check Number\"')){\n        iit[\"checkOrSlip\"] =iit['\"Check Number\"']?.trim();\n        delete iit['\"Check Number\"'];\n    }\n\n    if(iit.hasOwnProperty(\"Check or Slip #\")){\n        iit[\"checkOrSlip\"] =iit[\"Check or Slip #\"]?.trim();\n        delete iit[\"Check or Slip #\"];\n    }\n\n    if(iit.hasOwnProperty(\"Amount\")){\n        iit[\"amount\"] =iit[\"Amount\"]*1;\n        delete iit[\"Amount\"];\n    }\n\n    if(iit.hasOwnProperty(\"Documento\")){\n        iit[\"document\"] =iit[\"Documento\"].trim();\n        delete iit[\"Documento\"];\n    }\n\n    if(iit.hasOwnProperty(\"Description\")){\n        iit[\"description\"] =iit[\"Description\"]?.split('\"')?.join('')?.trim();\n        delete iit[\"Description\"];\n    }\n\n\n\n    \n    return iit;\n}\n\n\n\nexport const getPrevBalance = (mtn, accountForm, lbl) => \n    callbackOnMemory(\n        \"getPrevBalance\",\n        [mtn, accountForm, lbl],() => {\n        let keyId = accountForm.account;\n        if(accountForm.subAccount){\n            keyId = accountForm.account + \"_\" + accountForm.subAccount;\n        }\n        let accounts_summary_by_months = getStore(\"accounts_summary_by_months\")?.summary?.[keyId];\n\n        let prevMnt = mtn-1;\n        let bb = 0;\n        if(isNotEmpty(accounts_summary_by_months?.[prevMnt])){\n            let accBal = 0;\n            let prevMArr = Array.from(Array(mtn).keys());\n        \n            prevMArr.map(mntAct=>{\n                let amm = parseFloatToDecimal(accounts_summary_by_months[mntAct],2);\n                accBal = accBal*1 +  amm*1;\n            })\n            bb =accBal;\n        }\n        return bb;\n    }\n);\n\n\n\n\nexport const compareBanks =  (bnk1,bnk2) => {\n    let newRecord2Bank = [];\n    for(let i in bnk1){\n        let hh = parseBRecord(bnk1[i]);\n        if(hh.date){\n            //console.log(hh);\n            let isIn = false;\n            for(let i in bnk2){\n                let ourB = bnk2[i];\n                if(ourB.date === ourB.date && ourB.description === hh.description && ourB.amount===hh.amount && ourB.checkOrSlip===hh.checkOrSlip){\n                    isIn = true;\n                }\n            }\n            if(!isIn){\n                hh.bankRecordId = gen16CodeId();\n                newRecord2Bank.push(hh);\n            }\n        }\n    }\n    return newRecord2Bank;\n}\n\n\nexport const fetchItemOnQueue = (arr, cb) => {\n    fetchQueue(arr, fetchCSVInve, cb)\n}\n\nconst fetchCSVInve = async (qry2Sv, i, a, cb) => {\n    const res = fetchEncryptStream(qry2Sv);\n    const td = await res;\n    if (td) {\n        if(cb && a.length-1===i){\n           cb();\n        }\n        return td;\n    }\n}\n\n\n\n/****\n * \n * \n * \n * \n * \n * \nexport const termino = () => {\n\n    console.log(\"termino\")\n}\n\n\nexport const fetchOnQueue = (arr, ) => {\n\n    fetchQueue(arr, fetchCSV, termino)\n}\n\n\nconst fetchCSV = async (qry2Sv, i , a, cb) => {\n    if(cb && a.length-1===i){\n        console.log(qry2Sv, i , a.length, cb)\n       cb();\n    }\n    return 1\n}\n\n\n * \n */"],"names":["calc_sub_myr","cb","accounts_summary_by_months","getStore","balanceId","bdyq2","qryStore","params","businessId","res","fetchEncryptStream","td","summary","updStore","OpenToast","text","timeout","frm2Sv","gen16CodeId","type","add_balances","form","getall_account","all_accounts","sortAccounts","convertArray2Obj","getall_subaccount","all_sub_account","sortSubAccounts","convertArray2ObjGroupby","getall_bankRcrd","all_bank_bUp","filtersPendidng","filtersPnd","arr","sub2","pending","sub","verified","rangDt","i","hh","date","initDate","lastDate","linkId","status","push","sub_mayor","sortByDate","convertObj2Array","arr1","key","obj","length","map","s","subAccount","search_account","get_filter_by_acc","frm","filter_search_opera","account","error","GroupbyAcc","isPay","ObjectKeys","ele","nItm","convert4acc","callbackOnMemory","sort","a","b","A","B","sortComprobantesByDate","calcSubmayor","mInit","monthInit","Date","getMonth","prevBal","getPrevBalance","sortedA","d","item","itm","saldo","get_balance_params","get_balance_general_param","general","result","general_flds","result_flds","get_balances_by_type","coll","find_balances","kId","general_sheet","prepareBalanceComprobacion","calc_balance_comprobacion","reduc","acc","accountId","sub_accountId","cuenta","code","nombre","name","sub_cuenta","nombre_sub_cuenta","subAccountName","prepareSubMayorDatatoCvs","subacc","parseDateMMDDYY","document","comprobante","comprobanteId","description","debito","debit","credito","credit","operationId","cnv2Obj","compareEstadoCuenta","banco","vsc","ourBank_filtered","submS","submSIndx","ECS","cmpAlready","cmpbNotInBank","check","checkSub","subm","EC","validateIsInBank","comprobantId","validateIsNotInBank","vv","itmB","indB","amo","amount","amm","trim","document2","checkOrSlip","ready","iit","parseDateYYYYMMDD","parseBRecord","it","hasOwnProperty","getTime","split","join","mtn","accountForm","lbl","keyId","prevMnt","bb","isNotEmpty","accBal","Array","from","keys","mntAct","parseFloatToDecimal","compareBanks","bnk1","bnk2","newRecord2Bank","isIn","ourB","bankRecordId","fetchItemOnQueue","fetchQueue","fetchCSVInve","qry2Sv"],"sourceRoot":""}